lemma LemmaSeqPrefixNeq(xs: seq<uint>, ys: seq<uint>, i: nat)
    requires 0 <= i <= |xs| == |ys|
    requires ToNatRight(xs[..i]) != ToNatRight(ys[..i])
    ensures ToNatRight(xs) != ToNatRight(ys)
    decreases |xs| - i
  {
    if i == |xs| {
      assert xs[..i] == xs;
      assert ys[..i] == ys;
    } else {
      if xs[i] == ys[i] {
        reveal ToNatLeft();
                assert DropLast(ys[..i+1]) == ys[..i];

        LemmaToNatLeftEqToNatRightAuto();
        assert ToNatRight(xs[..i+1]) == ToNatLeft(xs[..i+1]);
<assertion> Insert assertion here </assertion>
      } else if xs[i] < ys[i] {
        LemmaSeqMswInequality(xs[..i+1], ys[..i+1]);
      } else {
        LemmaSeqMswInequality(ys[..i+1], xs[..i+1]);
<assertion> Insert assertion here </assertion>
      }
      reveal ToNatRight();
<assertion> Insert assertion here </assertion>
      LemmaSeqPrefixNeq(xs, ys, i + 1);
    }
  }