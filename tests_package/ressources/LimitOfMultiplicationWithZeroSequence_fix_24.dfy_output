lemma LimitOfMultiplicationWithZeroSequence(sequence: nat -> real, bound: real, zeroSeq: nat -> real)
    requires Sequences.IsBounded(sequence, bound)
    requires ConvergesTo(zeroSeq, 0.0)
    ensures ConvergesTo(Sequences.Mul(sequence, zeroSeq), 0.0)
  {
    var productSequence := Sequences.Mul(sequence, zeroSeq);
    forall epsilon: real | epsilon > 0.0 ensures ExistsCloseSuffix(productSequence, 0.0, epsilon) {
      var epsilon' := epsilon / RealArith.Max(bound, 1.0);
<assertion> Insert assertion here </assertion>
            var N :| SuffixIsClose(zeroSeq, 0.0, epsilon', N);
      assert SuffixIsClose(productSequence, 0.0, epsilon, N) by {
        forall n: nat | n >= N ensures RealArith.Dist(productSequence(n), 0.0) < epsilon {
          var s := sequence(n);
          var z := zeroSeq(n);
          calc {
            RealArith.Dist(productSequence(n), 0.0);
          ==
            RealArith.Abs(s * z);
          == { RealArith.AbsMul(s, z); }
            RealArith.Abs(s) * RealArith.Abs(z);
          <= { RealArith.MulMonotonic(RealArith.Abs(s), RealArith.Abs(z), epsilon'); }
            RealArith.Abs(s) * epsilon';
          < { RealArith.MulMonotonicStrict(epsilon', RealArith.Abs(s), bound); }
            bound * epsilon';
          <= { RealArith.MulMonotonic(epsilon', bound, RealArith.Max(bound, 1.0)); }
            RealArith.Max(bound, 1.0) * epsilon';
          ==
            epsilon;
          }
        }
      }
    }
  }