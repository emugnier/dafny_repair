lemma SoundIf(e: Expr, e1: Expr, e2: Expr, t: Type, effs: Effects)
      decreases If(e,e1,e2) , 0
      requires WellFormedRequestAndStore()
      requires EffectsInvariant(effs)
      requires Typesafe(If(e,e1,e2),effs,t)
      ensures IsSafe(r,s,If(e,e1,e2),t)
      ensures GuardedEffectsInvariant(If(e,e1,e2),getEffects(If(e,e1,e2),effs))
    {
      var t' :| getType(If(e,e1,e2),effs) == t' && subty(t',t,ValidationMode.Permissive);
<assertion> Insert assertion here </assertion>
            var (bt, effs1) := TC.inferBoolType(e,effs).value;
      assert IsSafe(r,s,e,Type.Bool(bt)) && GuardedEffectsInvariant(e,effs1) by {
        assert getType(e,effs) == Type.Bool(bt);
        assert subty(Type.Bool(bt),Type.Bool(bt),ValidationMode.Permissive);
        assert Typesafe(e,effs,Type.Bool(bt));
        Sound(e,Type.Bool(bt),effs);
      }
      match bt {
        case True =>
          assert IsTrue(r,s,e);
          var (t1,effs2) := TC.infer(e1,effs.union(effs1)).value;
          assert Typesafe(e1,effs.union(effs1),t1) by { SubtyRefl(t1); }
          if IsTrueStrong(r,s,e) {
            assert EffectsInvariant(effs1);
            assert IsSafe(r,s,e1,t1) && GuardedEffectsInvariant(e1,effs2) by {
              EffectsInvariantUnion(effs,effs1);
              Sound(e1,t1,effs.union(effs1));
            }
            assert IsSafe(r,s,If(e,e1,e2),t') by { IteTrueSafe(r,s,e,e1,e2,t'); }
            assert IsSafe(r,s,If(e,e1,e2),t) by {
              SubtyCompat(t',t);
              SemSubtyTransport(r,s,If(e,e1,e2),t',t);
            }
            assert GuardedEffectsInvariant(If(e,e1,e2),effs1.union(effs2)) by {
              if IsTrueStrong(r,s,If(e,e1,e2)) {
                IteTrueStrongTrue(r,s,e,e1,e2);
                assert EffectsInvariant(effs2);
                EffectsInvariantUnion(effs1,effs2);
              }
            }
          } else {
            assert IsSafe(r,s,If(e,e1,e2),t) by {
              IteError(r,s,e,e1,e2,Type.Bool(True),t);
            }
            assert GuardedEffectsInvariant(If(e,e1,e2),effs1.union(effs2)) by {
              IteError(r,s,e,e1,e2,Type.Bool(True),Type.Bool(True));
              assert !IsTrueStrong(r,s,If(e,e1,e2));
            }
          }
        case False =>
          assert IsFalse(r,s,e);
          var (t2,effs2) := TC.infer(e2,effs).value;
          assert Typesafe(e2,effs,t2) by { SubtyRefl(t2); }
          assert IsSafe(r,s,e2,t2) && GuardedEffectsInvariant(e2,effs2) by {
            Sound(e2,t2,effs);
          }
          assert IsSafe(r,s,If(e,e1,e2),t') by { IteFalseSafe(r,s,e,e1,e2,t'); }
          assert IsSafe(r,s,If(e,e1,e2),t) by {
            SubtyCompat(t',t);
            SemSubtyTransport(r,s,If(e,e1,e2),t',t);
          }
          assert GuardedEffectsInvariant(If(e,e1,e2),effs2) by {
            if IsTrueStrong(r,s,If(e,e1,e2)) {
              IteTrueStrongFalse(r,s,e,e1,e2);
              assert EffectsInvariant(effs2);
            }
          }
        case AnyBool =>
          var (t1,effs2) := TC.infer(e1,effs.union(effs1)).value;
          var (t2,effs3) := TC.infer(e2,effs).value;
          assert Typesafe(e1,effs.union(effs1),t1) by { SubtyRefl(t1); }
          assert Typesafe(e2,effs,t2) by { SubtyRefl(t2); }
          assert t' == lubOpt(t1,t2,ValidationMode.Permissive).value;
          assert subty(t1,t',ValidationMode.Permissive) && subty(t2,t',ValidationMode.Permissive) by { LubIsUB(t1,t2,t',ValidationMode.Permissive); }
          if IsSafeStrong(r,s,e,Type.Bool(bt)) {
            if IsTrue(r,s,e) {
              // `e` evaluates to true
              IsTrueImpliesIsTrueStrong(r,s,e,Type.Bool(bt));
              assert IsTrueStrong(r,s,e);
              assert EffectsInvariant(effs1);
              assert IsSafe(r,s,e1,t1) && GuardedEffectsInvariant(e1,effs2) by {
                EffectsInvariantUnion(effs,effs1);
                Sound(e1,t1,effs.union(effs1));
              }
              assert IsSafe(r,s,If(e,e1,e2),t1) by { IteTrueSafe(r,s,e,e1,e2,t1); }
              assert IsSafe(r,s,If(e,e1,e2),t) by {
                SubtyCompat(t1,t');
                SubtyCompat(t',t);
                SemSubtyTransport(r,s,If(e,e1,e2),t1,t);
              }
              assert GuardedEffectsInvariant(If(e,e1,e2),effs1.union(effs2)) by {
                if IsTrueStrong(r,s,If(e,e1,e2)) {
                  IteTrueStrongTrue(r,s,e,e1,e2);
                  EffectsInvariantUnion(effs1,effs2);
                }
              }
              assert GuardedEffectsInvariant(If(e,e1,e2),effs1.union(effs2).intersect(effs3)) by {
                if IsTrueStrong(r,s,If(e,e1,e2)) {
                  EffectsInvariantIntersectL(effs1.union(effs2),effs3);
                }
              }
            } else {
              // `e` evaluates to false
              NotTrueImpliesFalse(r,s,e,bt);
              assert IsFalse(r,s,e);
              assert IsSafe(r,s,e2,t2) && GuardedEffectsInvariant(e2,effs3) by {
                Sound(e2,t2,effs);
              }
              assert IsSafe(r,s,If(e,e1,e2),t2) by { IteFalseSafe(r,s,e,e1,e2,t2); }
              assert IsSafe(r,s,If(e,e1,e2),t) by {
                SubtyCompat(t2,t');
                SubtyCompat(t',t);
                SemSubtyTransport(r,s,If(e,e1,e2),t2,t);
              }
              assert GuardedEffectsInvariant(If(e,e1,e2),effs3) by {
                if IsTrueStrong(r,s,If(e,e1,e2)) {
                  IteTrueStrongFalse(r,s,e,e1,e2);
                }
              }
              assert GuardedEffectsInvariant(If(e,e1,e2),effs1.union(effs2).intersect(effs3)) by {
                if IsTrueStrong(r,s,If(e,e1,e2)) {
                  EffectsInvariantIntersectR(effs1.union(effs2),effs3);
                }
              }
            }
          } else {
            // `e` produces an error
            assert IsSafe(r,s,If(e,e1,e2),t) by {
              IteError(r,s,e,e1,e2,Type.Bool(bt),t);
            }
            assert GuardedEffectsInvariant(If(e,e1,e2),effs1.union(effs2).intersect(effs3)) by {
              IteError(r,s,e,e1,e2,Type.Bool(bt),Type.Bool(True));
              assert !IsTrueStrong(r,s,If(e,e1,e2));
            }
          }
      }
    }