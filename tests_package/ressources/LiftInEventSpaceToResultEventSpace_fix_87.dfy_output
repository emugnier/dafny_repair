lemma LiftInEventSpaceToResultEventSpace<A(!new)>(event: iset<A>, eventSpace: iset<iset<A>>)
    requires event in eventSpace
    ensures ResultsWithValueIn(event) in ResultEventSpace(eventSpace)
  {
    var results := ResultsWithValueIn(event);
    assert Measures.IsSigmaAlgebra(Rand.eventSpace) by {
      Rand.ProbIsProbabilityMeasure();
    }
    assert Values(results) == event by {
      forall v: A ensures v in event <==> v in Values(results) {
        var s: Rand.Bitstream :| true;
        assert v in event <==> Result(v, s) in results;
      }
    }
    assert Rests(results) in Rand.eventSpace by {
      if v :| v in event {
        assert Rests(results) == Measures.SampleSpace() by {
          forall s: Rand.Bitstream ensures s in Rests(results) <==> s in Measures.SampleSpace() {
            calc {
              s in Rests(results);
              Result(v, s) in results;
              true;
            }
          }
        }
      } else {
              }
<assertion> Insert assertion here </assertion>
    }
  }